@model CheckoutBillingAddressModel
<div class="checkout-data">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressTop })
    @if (Model.ShipToSameAddressAllowed)
    {
        <div class="section ship-to-same-address">
            <p class="selector text-left">
                <div class="custom-control custom-checkbox">
                    <input asp-for="ShipToSameAddress" type="checkbox" class="custom-control-input" id="ShipToSameAddress" />
                    <label class="custom-control-label" for="ShipToSameAddress" asp-for="ShipToSameAddress">@T("Checkout.ShipToSameAddress")</label>
                </div>
            </p>
        </div>
    }
    @if (Model.ExistingAddresses.Count > 0)
    {
        <div class="section select-billing-address">
            <label for="billing-address-select">@T("Checkout.SelectBillingAddressOrEnterNewOne")</label>
            <div class="col-lg-6 mx-auto">
                <select name="billing_address_id" id="billing-address-select" class="address-select form-control mx-auto"
                        title="" onchange="Billing.newAddress(!this.value)">
                    @foreach (var address in Model.ExistingAddresses)
                    {
                        var addressLine = "";
                        addressLine += address.FirstName;
                        addressLine += " " + address.LastName;
                        if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                        {
                            addressLine += ", " + address.Address1;
                        }
                        if (!string.IsNullOrEmpty(address.FormattedCustomAddressAttributes))
                        {
                            var houseNumber = string.Empty;

                            if (address.CustomAddressAttributes.Any(a => a.Name == "Address 1 House Number"))
                            {
                                if (address.FormattedCustomAddressAttributes.Contains("Address 1 House Number:"))
                                {
                                    houseNumber = address.FormattedCustomAddressAttributes.Replace("Address 1 House Number:", string.Empty);
                                }
                                else if (address.FormattedCustomAddressAttributes.Contains("Kućni broj:"))
                                {
                                    houseNumber = address.FormattedCustomAddressAttributes.Replace("Kućni broj:", string.Empty);
                                }
                            }

                            if (address.CustomAddressAttributes.Any(a => a.Name == "Address 2 House Number"))
                            {
                                var customAddressAttribute = address.CustomAddressAttributes.First(a => a.Name == "Address 2 House Number");

                                if (houseNumber.Contains("Address 2 House Number:"))
                                {
                                    var start = houseNumber.LastIndexOf("<br />Address 2 House Number:");
                                    var end = houseNumber.Length;

                                    houseNumber = houseNumber.Remove(start, end - start);
                                }
                                else if (houseNumber.Contains("Kućni broj:"))
                                {
                                    var start = houseNumber.IndexOf("<br />Kućni broj 2:");
                                    var end = houseNumber.LastIndexOf(",");

                                    houseNumber = houseNumber.Remove(start, end);
                                }
                            }

                            addressLine += address.CustomAddressAttributes.Any(a => a.Name == "Address 1 House Number") ?
                                    $" {houseNumber}" :
                                    $" { address.FormattedCustomAddressAttributes}";

                            //addressLine += " " + address.FormattedCustomAddressAttributes;

                        }
                        if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                        {
                            addressLine += ", " + address.City;
                        }
                        if (address.CountyEnabled && !string.IsNullOrEmpty(address.County))
                        {
                            addressLine += ", " + address.County;
                        }
                        if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                        {
                            addressLine += ", " + address.StateProvinceName;
                        }
                        if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                        {
                            addressLine += " " + address.ZipPostalCode;
                        }
                        if (address.CountryEnabled && !string.IsNullOrWhiteSpace(address.CountryName))
                        {
                            addressLine += ", " + address.CountryName;
                        }
                        //how should we render "FormattedCustomAddressAttributes" here?
                        <option value="@(address.Id)">@(addressLine)</option>
                    }
                    <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
                </select>
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressMiddle })
    <div class="section new-billing-address" id="billing-new-address-form">
        <div class="enter-address">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            @{
                var dataDictAddress = new ViewDataDictionary(ViewData);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                @await Html.PartialAsync("~/Plugins/Shipping.Core/Themes/Hajduk/Views/CustomShared/_CreateOrUpdateAddress.cshtml", Model.BillingNewAddress, dataDictAddress)
            }
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressBottom })
</div>
