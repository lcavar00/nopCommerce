@model IList<CustomerAttributeModel>
@using Nop.Core.Domain.Catalog
@using Nop.Services.Customers
@using Nop.Web.Framework.Controllers;
@using System.Text.RegularExpressions
@inject Nop.Services.Localization.ILocalizationService localizationService
@inject Nop.Core.IWorkContext workContext
@foreach (var attribute in Model)
{
    var languageId = (await workContext.GetWorkingCurrencyAsync()).Id;
    var controlId = $"{NopCustomerServicesDefaults.CustomerAttributePrefix}{attribute.Id}";
    var controlClass = $"js-customer_attribute_{attribute.Name.ToLower().Replace(" ", string.Empty)}";
    controlClass = Regex.Replace(controlClass, @"[^\u0000-\u007F]+", string.Empty);
    var textPrompt = attribute.Name;

    <div class="inputs custom-attributes @controlClass">
        <label>@textPrompt:</label>

        @switch (attribute.AttributeControlType)
        {
            case AttributeControlType.DropdownList:
                {
                    <select name="@(controlId)" id="@(controlId)">
                        @if (!attribute.IsRequired)
                        {
                            <option value="0">---</option>
                        }
                        @foreach (var attributeValue in attribute.Values)
                        {
                            <option selected="@attributeValue.IsPreSelected" value="@attributeValue.Id">@attributeValue.Name</option>
                        }
                    </select>
                }
                break;
            case AttributeControlType.RadioList:
                {
                    <ul class="option-list">
                        @foreach (var attributeValue in attribute.Values)
                        {
                            <li>
                                <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" />
                                <label for="@(controlId)_@(attributeValue.Id)">@attributeValue.Name</label>
                            </li>
                        }
                    </ul>
                }
                break;
            case AttributeControlType.Checkboxes:
            case AttributeControlType.ReadonlyCheckboxes:
                {
                    <ul class="option-list">
                        @foreach (var attributeValue in attribute.Values)
                        {
                            <li>
                                <input id="@(controlId)_@(attributeValue.Id)" type="checkbox" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" @(attribute.AttributeControlType == AttributeControlType.ReadonlyCheckboxes ? Html.Raw(" disabled=\"disabled\"") : null) />
                                <label for="@(controlId)_@(attributeValue.Id)">@attributeValue.Name</label>
                            </li>
                        }
                    </ul>
                }
                break;
            case AttributeControlType.TextBox:
                {
                    <input name="@(controlId)" type="text" class="textbox" id="@(controlId)" value="@(attribute.DefaultValue)" />
                }
                break;
            case AttributeControlType.MultilineTextbox:
                {
                    <textarea id="@(controlId)" name="@(controlId)">@(attribute.DefaultValue)</textarea>
                }
                break;
            case AttributeControlType.Datepicker:
            case AttributeControlType.FileUpload:
            case AttributeControlType.ColorSquares:
            case AttributeControlType.ImageSquares:
                {
                    //not support attribute type
                }
                break;
        }
        @if (attribute.IsRequired)
        {
            <nop-required />
        }
    </div>
    @if (controlClass.ToLower().Contains("broj") || controlClass.ToLower().Contains("number"))
    {
        <script>
            (function () {
                var className = ".@controlClass";
                var houseNumberDiv = document.querySelector(className);
                if (houseNumberDiv != null && houseNumberDiv.length != 0 && houseNumberDiv != "undefined") {
                    document.querySelector(".@controlClass").remove();
                    var streetAddressDiv = document.querySelector(".js-street-address1");
                    if (className.includes("2"))
                        streetAddressDiv = document.querySelector(".js-street-address2");
                    if (streetAddressDiv != null) {
                        streetAddressDiv.parentNode.insertBefore(houseNumberDiv, streetAddressDiv.nextSibling);

                        if (streetAddressDiv.getAttribute("style") == "display: none;" || streetAddressDiv == null || streetAddressDiv == "undefined" || streetAddressDiv.length == 0) {
                            houseNumberDiv.remove();
                        }
                    }
                }

            })();
        </script>
    }
}
